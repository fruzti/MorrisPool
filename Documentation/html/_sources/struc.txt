.. _getting_started:


***************
Estructura de MorrisPool
***************

El programa consiste básicamente de siete archivos:
- BasicClases.py
- MainApp.py
- MorrisPool.py
- Pool.py
- PolarCoords.py
- VideoFile.py
- DrawOutput.py

y un archivo wrapper o de inicio: **MainFile**.

BasicClases.py
===================
Contiene las clases y funciones básicas usadas por el programa. Contiene funciones de apoyo para analizar el experimento y las necesarias para la generación de gráficas y reportes.

DrawOutput.py
===================
Esta clase es la encargada de seleccionar que tipo de imagen se generará al final del experimento. 

VideoFile.py
===================
Este archivo contiene una clase para la manipulación del video. Su utilización principal es para DEBUG, pero puede ser utilizada para suplir la necesidad de contar con el video. Aquí se piensa implementar una solución on-line al experimento.

PolarCoords.py
===================
Esta clase es utilizada para calcular los fantasmas del Target. Contiene los métodos matemáticos, en coordenadas polares, para encontrar las representaciones de las áreas homologas al del Target en los otros cuadrantes.

MainApp.py
===================

Este archivo contiene las rutinas necesarias para la creación de la interfaz gráfica y del recorte del video.

MorrisPool.py
===================

Contiene la clase y métodos necesarios para comenzar el análisis para el experimento. Es aquí donde el trayecto del ratón es calculado y el reporte es generado.

Pool.py
===================

Es aquí donde la clase que se encarga de realizar el análisis del experimento de transferencia es implementada.

MainFile.py
===================

Finalmente, este Script es el encargado de poner todo junto y de interactuar con el usuario. Consta del llamado de todas las clases necesarias para el análisis y para escoger si la prueba se trata de una de transferencia o no. 
Además, es aquí donde se llama a la rutina para guardar la imagen final de salida.

.. code-block:: python

	#############################################################################
	# Copyright 2014 by Mario Coutino                                           #
	#                                                                           #
	#                        All Rights Reserved                                #
	#                                                                           #
	# Permission to use, copy, modify, and distribute this software and         #
	# its documentation for any purpose and without fee is hereby	            #
	# granted, provided that the above copyright notice appear in all           #         
	# copies and that both that copyright notice and this permission            #
	# notice appear in supporting documentation, and that the name of Mario     #
	# Coutino not be used in advertising or publicity pertaining to             #
	# distribution of the software without specific, written prior              #
	# permission.                                                               #
	#                                                                           #
	# MARIO COUTINO DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,      #
	# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN       #
	# NO EVENT SHALL MARIO COUTINO BE LIABLE FOR ANY SPECIAL, INDIRECT OR       #
	# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS       #
	# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,                #
	# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN                 #
	# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                  #
	#############################################################################

	from MainApp import *
	from MorrisPool import *
	from BasicClases import *
	from Pool import *
	from DrawOutput import *
	import cv2

	def createBasePhoto(filePath,img):
	    '''
	    Helper function to create the image to mark the target's position.
	    '''
	    basePath = ''
    	    pathParts = filePath.split('/')
	    for el in pathParts[:-1]:
        	basePath += el + '/'
	    basePath += 'basePhoto.png'
    
	    return cv2.imwrite(basePath, img)
    
	def convListToTuple(l):
	    t = []
	    for e in  l:
        	t.append((e[0],e[1]))
	    return t
    
	#-------------------------------------------------------------------------------
	videoSequence = None
	start, end = (0,0)
	mousePath = None
	morrisPool = None
	#-------------------------------------------------------------------------------

	print 'Iniciando Aplicacion'
	w = MainApp()

	videoSequence = w.getVideoSequence()
	(start,end) = w.getSequenceBoundaries()

	print 'Creando Entorno'
	print '---------------------------'
	morrisPool = MorrisPool(videoSequence, start, end)

	print 'Comenzando Deteccion'
	print '---------------------------'
	morrisPool.startTracking(None)

	morrisPool.getRealDistance2(w.getPathName())

	mousePath = morrisPool.getMousePath()

	generateReport(mousePath, morrisPool.getRealDistance(), morrisPool.getConvFactor())

	print 'Total Swimming Time[s]: ' + str(morrisPool.getVideoTimeInS())

	op = raw_input('Transfer Experiment? [y/n]: ')
	op = op.lower()

	if op == 'y':
	    print 'Continue with Transference Analysis'
	    print '------------------------------------'
	    (centre, rad) = morrisPool.getPoolPosition()
	    p = Pool(centre, convListToTuple(mousePath), w.getPathName())
	    p.analyseMousePath()
	    p.showPath()
	    d = DrawOutput(morrisPool.poolRadio, morrisPool.poolCenter,
        	p.targetPosition,morrisPool.mousePathA)
	    p.generateReport()
	    print 'Analysis Finished'
	    print '------------------------------------'
	    print 'Done!'
    
	else:
	    print 'Creating Base Image...'
	    print '------------------------------------'
	    createBasePhoto(w.getPathName(), videoSequence[0])
	    (centre, rad) = morrisPool.getPoolPosition()
	    p = Pool(centre, convListToTuple(mousePath), w.getPathName())
	    d = DrawOutput(morrisPool.poolRadio, morrisPool.poolCenter,
        	p.targetPosition,morrisPool.mousePathA)
    	print 'Done!'